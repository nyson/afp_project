#+TITLE: Lambda Calculus Proof Assistant
#+AUTHOR: Jonathan Sk√•rstedt and Henrik Steenari 
#+EMAIL: jonathan.skarstedt@gmail.com, hugosteenari@gmail.com
#+OPTIONS: toc:nil

* Introduction
Lambda Toolbox* is an executable for playing around with lambda calculus in 
Haskell. However, we think it's not that easy to use as it could be to be 
really useful. Therefore, we want to give some kind of graphical interface 
to it with clickable rules and reductions to primarily work as an easy-to-use 
interface but we also want to extend it to be able to make a proof of concept 
for a future proof assistant. 

We want to create an UI where you can enter any (syntactically correct) lambda 
expression, reduce and convert lambda expressions using well defined rules and
create an operationfor composing lambda calculus rules and 
an eDSL "record" the solution and the steps done to conclude it, to replay it.

* How we plan to go about it
We have three milestones: 
 1. Making a GUI, probably web based using haste**, and entering arbitrary
    lambda expressions 
 2. Implement an operation for composing lambda reduction rules and an eDSL
    to record and replay solutions to lambda calculus equations and replay them
 3. Combine #1 and #2 in a neato web app

* References 
  + * lambda-toolbox: https://hackage.haskell.org/package/lambda-toolbox
  + * haste: https://hackage.haskell.org/package/haste-compiler





