#+LATEX_HEADER: \usepackage{listings} \lstset{language=Haskell}

#+TITLE: Project Report - Lambdabox GUI with Traceable Equations
#+AUTHOR: Jonathan SkÃ¥rstedt and Henrik Steenari
#+EMAIL: jonathan.skarstedt@gmail.com, hugosteenari@gmail.com
#+OPTIONS: toc:nil

* Introduction
We are not done yet, our project still needs some work. The main reason for 
this is that we underestimated Lambda Toolbox, and overestimated our time.

* Modification
Our modification resulted in wrapping lots of Lambda Toolbox functions in monadic
wrappers for collecting a trace of operations as a side effect. We choose 
the StateT monad transformer with IO for this task, with a possible goal 
to reduce it to WriterT and IO, or maybe even Writer in the future.

* A transformation to a DSL
From the original lambda-toolbox.hs file, we've extracted the functionality
into two files; Toolbox.hs the original lambda-toolbox file. Lambda-Toolbox
already had (a somewhat boring) way to produce traces but we are interested
into producing these traces by the use of a monad which collects the equation
as a side effect. 

\begin{lstlisting}
data TraceSymbol = ... 
data Lambda = Func String Lambda | Expr [Lambda] | Name String
type Equation = [(TraceSymbol, Lambda)]
type Trace = StateT Equation IO
\end{lstlisting}

\emph{TraceSymbol} is symbols that define operations over lambdas, such as
alpha, beta and eta conversions. \emph{Equation} is a list of lambda 
expresisons tupled with a \emph{TraceSymbol} representing the type of 
conversion used to create the lambda expression. 

The \emph{Trace} is a monad defining the DSL, in which all the conversions of
the lambda expressions can take place. 

\begin{lstlisting}
alpha :: Lambda -> Trace Lambda
beta :: Lambda -> Trace (BetaResult, Lambda)
eta :: Lambda -> Trace (Bool, Lambda)
\end{lstlisting}

\emph{alpha} performs a rename of the top level bound variables, \emph{beta} 
performs an application of the lambda expression and \emph{eta} makes the 
expression point free, as in 
\lambda x \rightarrow fun x \Longrightarrow_{eta} fun.

* Problems 
We noticed quite early that Lambda Toolbox was not the easiest to understand. 
Lambda Toolbox is written as an executable and it was made clear that the code
was not meant to be understood by more than the maintainer, and it is our 
belief that Lambda Toolbox wasn't written over a longer period of time.

The code existed just in one file, with no separation of concerns. This single
file is a mishmash of a console application and a lambda calculus calculator.
The code is pretty badly documented and there exists several top level 
declarations which seems to have the same purpose, for example the functions 
\emph{alpha}, \emph{alpha'} and {alpha2}; or the definition 
\emph{beta = beta'}, where \emph{beta} and \emph{beta'} has identical 
type signatures.

We had to rewrite some of the functions so that we could trace the reductions
that the toolbox made. We modified the replaceFree function so it adds all the
Alpha Conversions to the trace.

We removed the beta function and renamed beta' to beta as the original
beta function just passed on it's input to beta'. We did not modify beta so it
adds each step of the of the beta reduction as we would need to rewrite the
whole function.

We did not modify the eta function, which is responsible for eta reductions,
because we would need to rewrite the whole function to add the reductions to
the trace.

* Project Status
In this writing moment, we have separated lambda calculus functions and 
the code of the lambda-toolbox executable. The library uses our monad, 
=type Trace = StateT Equation IO=, which has lead to that the code for the 
console application currently is broken, this may not be fixed as 
it is out of scope for this project. We have created a minor Haste
application (see index.html and Site.hs) which should be seen as a somewhat 
interactive wireframe, not a finished product.

As we did not modify beta and eta to add to the trace, which we wanted
but as we did not expect the need to rewrite so much of the code.

* Where we want to go next
Neither goals are currently finished, although the eDSL is more finished than 
the GUI. A minor finished eDSL should concist of exports of alpha, beta and 
eta, to perform basic lambda calculus operations. Also, a function for reading
lambda expression from strings is needed, but that would be easy to wrap with
the Read Lambda instance given by Lambda Toolbox.

For the GUI, we want to be able to read valid lambda expressions and parse 
them accordingly, and perform valid lambda calculus operations on them.

As a sub priority, we want to restore functionality of the original 
lambda-toolbox using our library model which includes separation of concerns.







